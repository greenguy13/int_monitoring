#!/usr/bin/env python
import math # use of pi.
import rospy # module for ROS APIs
from intermittent_monitoring.robot import *

"""
Robot moves from one area to another

Inputs:
> odom
> laser
> waypoints

Process:
Moves to a waypoint. If that area is a charging station it charges up. 
If moitoring area it monitors (or raises) the F-measure

Outputs:
## Visit area
> Arrived at goal area requested (as action) by decision_making
> Action request to fmeasure to restore F-measure

## Battery levels (WORK)
> Service to decision_making for current battery level
> Action request to charging station to charge up battery
> Publishes battery levels

"""

if __name__ == "__main__":
    #Step 1. Configuration of parameters
    #1.a. Simulation parameters
    motion_config = {
        'NODE_NAME': 'motion_server',
        'FREQUENCY': 10,  # Hz.
        'LINEAR_VELOCITY': 0.75,  # m/s, 0.2
        'ANGULAR_VELOCITY': math.pi / 4,  # rad/s
        'LASER_ANGLE_FRONT': 0,  # radians
        'MIN_THRESHOLD_DISTANCE': 0.5,  # m, threshold distance.
        'DEFAULT_CMD_VEL_TOPIC': 'cmd_vel',
        'DEFAULT_SCAN_TOPIC': 'base_scan',
        'DEFAULT_ODOM_TOPIC': 'odom'
    }

    paths_config = {
        'paths_dict': {
         '(0, 0)': [(0, 0)],
         '(1, 1)': [(4, 5)],
         '(2, 2)': [(1, 7)],
         '(3, 3)': [(1, 9)],
         '(0, 1)': [(1, 1), (1, 3),  (4, 3), (4, 5)],
         '(1, 0)': [(4, 5), (4, 3), (1, 3), (1, 1)],
         '(0, 2)': [(1, 1), (1, 3), (7.5, 3), (7.5, 6.25), (1, 6.25), (1, 7)],
         '(2, 0)': [(1, 7), (1, 6.25), (7.5, 6.25), (7.5, 3), (1, 3), (1, 1)],
         '(0, 3)': [(1, 1), (1, 3), (8, 3), (8, 1), (9, 1), (9, 9), (1, 9)],
         '(3, 0)': [(1, 9), (9, 9), (9, 1), (8, 1), (8, 3), (1, 3), (1, 1)],
         '(1, 2)': [(4, 5), (7.5, 5), (7.5, 6.25), (1, 6.25), (1, 7)],
         '(2, 1)': [(1, 7), (1, 6.25), (7.5, 6.25), (7.5, 5), (4, 5)],
         '(1, 3)': [(4, 5), (4, 3), (8, 3), (8, 1), (9, 1), (9, 9), (1, 9)],
         '(3, 1)': [(1, 9), (9, 9), (9, 1), (8, 1), (8, 3), (4, 3), (4, 5)],
         '(2, 3)': [(1, 7), (1, 6.25), (8, 6.25), (8, 1), (9, 1), (9, 9), (1, 9)],
         '(3, 2)': [(1, 9), (9, 9), (9, 1), (8, 1), (8, 6.25), (1, 6.25), (1, 7)]},
        'location': 0
    }

    areas = [1, 2, 3]
    robot = Robot(areas, motion_config, paths_config)
    robot.run_operation()
    rospy.spin()

