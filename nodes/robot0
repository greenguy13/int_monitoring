#!/usr/bin/env python
import math # use of pi.
import rospy # module for ROS APIs
import numpy as np
from intermittent_monitoring.robot import *

if __name__ == "__main__":
    #Step 1. Configuration of parameters
    #1.a. Simulation parameters
    motion_config = {
        'FREQUENCY': 10,  # Hz.
        'LINEAR_VELOCITY': 1.0,  # m/s, 0.2
        'ANGULAR_VELOCITY': math.pi / 4,  # rad/s
        'LASER_ANGLE_FRONT': 0,  # radians
        'MIN_THRESHOLD_DISTANCE': 0.5,  # m, threshold distance.
        'DEFAULT_CMD_VEL_TOPIC': '/cmd_vel', #'/robot_0/cmd_vel',
        'DEFAULT_SCAN_TOPIC': '/base_scan', #'/robot_0/base_scan',
        'DEFAULT_ODOM_TOPIC': '/odom', #'/robot_0/odom'
        'MAX_BATTERY': 100, #max battery level
        'battery_consumption_restoring_fmeasure': 0.01, #battery consumed for restoring F-measure
        'battery_consumption_moving_forward': 0.10 #battery consumed per m/s traversed
    }

    dist_matrix = np.array([[0, 10, 18, 15],
                               [10, 0, 15, 18],
                               [18, 15, 0, 10],
                               [15, 18, 10, 0]])
    duration_matrix = dist_matrix * motion_config['LINEAR_VELOCITY']
    dict_batt_consumption = (duration_matrix * motion_config['battery_consumption_moving_forward']) + motion_config['battery_consumption_restoring_fmeasure']

    paths_config = {
    'paths_dict' : {
        '(0, 0)': [(0, 0)],
        '(1, 1)': [(0, 10)],
        '(2, 2)': [(15, 10)],
        '(3, 3)': [(15, 0)],
        '(0, 1)': [(0, 10)],
        '(1, 0)': [(0, 0)],
        '(0, 2)': [(15, 10)],
        '(2, 0)': [(0, 0)],
        '(0, 3)': [(15, 0)],
        '(3, 0)': [(0, 0)],
        '(1, 2)': [(15, 10)],
        '(2, 1)': [(0, 10)],
        '(1, 3)': [(15, 0)],
        '(3, 1)': [(0, 10)],
        '(2, 3)': [(15, 0)],
        '(3, 2)': [(15, 10)]},


    'dict_duration': duration_matrix,

    'dict_batt_consumption': dict_batt_consumption,
    'areas': [1, 2, 3],  # [1, 2, 3],
    'decay_rates': {'1': 0.020, '2': 0.010, '3': 0.005},
    'location': 0  # starting location is the charging station
}


    robot = Robot(0, motion_config, paths_config)
    robot.run_operation()
    rospy.spin()


# paths_config = {
#     'paths_dict': {
#         '(0, 0)': [(1, 1)],
#         '(1, 1)': [(4, 5)],
#         '(2, 2)': [(1, 7)],
#         '(3, 3)': [(1, 9)],
#         '(0, 1)': [(1, 1), (1, 3), (4, 3), (4, 5)],
#         '(1, 0)': [(4, 5), (4, 3), (1, 3), (1, 1)],
#         '(0, 2)': [(1, 1), (1, 3), (7.5, 3), (7.5, 6.25), (1, 6.25), (1, 7)],
#         '(2, 0)': [(1, 7), (1, 6.25), (7.5, 6.25), (7.5, 3), (1, 3), (1, 1)],
#         '(0, 3)': [(1, 1), (1, 3), (8, 3), (8, 1), (9, 1), (9, 9), (1, 9)],
#         '(3, 0)': [(1, 9), (9, 9), (9, 1), (8, 1), (8, 3), (1, 3), (1, 1)],
#         '(1, 2)': [(4, 5), (7.5, 5), (7.5, 6.25), (1, 6.25), (1, 7)],
#         '(2, 1)': [(1, 7), (1, 6.25), (7.5, 6.25), (7.5, 5), (4, 5)],
#         '(1, 3)': [(4, 5), (4, 3), (8, 3), (8, 1), (9, 1), (9, 9), (1, 9)],
#         '(3, 1)': [(1, 9), (9, 9), (9, 1), (8, 1), (8, 3), (4, 3), (4, 5)],
#         '(2, 3)': [(1, 7), (1, 6.25), (8, 6.25), (8, 1), (9, 1), (9, 9), (1, 9)],
#         '(3, 2)': [(1, 9), (9, 9), (9, 1), (8, 1), (8, 6.25), (1, 6.25), (1, 7)]},
#
#     # These duration can be learned/collected!
#     'dict_duration': np.array([[0, 13.978, 33.8757, 47.92],
#                                [17.521, 0, 27.4774, 48.695],
#                                [33.827, 22.955, 0, 49.973],
#                                [57.22, 49.53, 56.535, 0]]),
#
#     'dict_batt_consumption': np.array([[0, 15.749, 37.85, 52.15],
#                                        [20.1, 0, 31.45, 53.05],
#                                        [37.6, 26.65, 0, 54.85],
#                                        [61.1, 53.45, 60.85, 0]]),
#     'areas': [1, 2, 3],  # [1, 2, 3],
#     'decay_rates': {'1': 0.020, '2': 0.010, '3': 0.005},  # {'1': 0.020, '2': 0.010, '3': 0.005},
#     'location': 0  # starting location is the charging station
# }